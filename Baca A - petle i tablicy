//Viktoriia Volkova
#include <iostream>
using namespace std;

const int MAX_ROZM = 1024;

void compressRowL(unsigned int row[], int size) {
    unsigned int temp[MAX_ROZM] = {0};
    int idx = 0;

    for (int i = 0; i < size; i++) {
        if (row[i] != 0) {
            temp[idx++] = row[i];
        }
    }

    for (int i = 0; i < size; i++) {
        row[i] = temp[i];
    }
}

int mergeRowL(unsigned int row[], int size) {
    int num_ops = 0;  // Inicjalizacja licznika operacji na wierszu.

    for (int i = 0; i < size - 1; i++) {  // Iteracja przez elementy wiersza do przedostatniego.
        if (row[i] == 0 || row[i + 1] == 0) break;  // Jeśli któryś z sąsiadujących elementów jest zerem, przerwij pętlę.

        if (row[i + 1] % row[i] == 0) {  // Jeśli sąsiadujące elementy są podzielne przez siebie.
            row[i + 1] -= row[i];  // Zmniejsz element na pozycji i+1 o wartość elementu na pozycji i.
            row[i] *= 2;  // Podwój wartość elementu na pozycji i.
            return 1;  // Zakończ funkcję, zwracając 1, gdyż wykonano operację łączenia.
            num_ops++;  // Ta linijka nigdy nie zostanie osiągnięta, bo return zakończyłby funkcję wcześniej.
        }
    }

    return num_ops;  // Zwróć liczbę operacji łączenia na wierszu.
}


void compressRowG(unsigned int arr[MAX_ROZM][MAX_ROZM], int size) {
    for (int i = 0; i < size; i++) {
        unsigned int temp[MAX_ROZM] = {0};
        int idx = 0;

        for (int j = 0; j < size; j++) {
            if (arr[j][i] != 0) {
                temp[idx++] = arr[j][i];
            }
        }

        for (int j = 0; j < size; j++) {
            arr[j][i] = temp[j];
        }
    }
}

int mergeColumnG(unsigned int arr[MAX_ROZM][MAX_ROZM], int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size - 1; j++) {
            if (arr[j][i] == 0 || arr[j + 1][i] == 0) break;
            if (arr[j + 1][i] % arr[j][i] == 0) {
                arr[j + 1][i] -= arr[j][i];
                arr[j][i] *= 2;
                return 1;
            }
        }
    }
    return 0;
}

void compressRowD(unsigned int arr[MAX_ROZM][MAX_ROZM], int size) {
    for (int i = 0; i < size; i++) {
        unsigned int temp[MAX_ROZM] = {0};
        int idx = size - 1;

        for (int j = size - 1; j >= 0; j--) {
            if (arr[j][i] != 0) {
                temp[idx--] = arr[j][i];
            }
        }

        for (int j = 0; j < size; j++) {
            arr[j][i] = temp[j];
        }
    }
}

int mergeColumnD(unsigned int arr[MAX_ROZM][MAX_ROZM], int size) {
    int num_ops = 0;
    for (int i = 0; i < size; i++) {
        for (int j = size - 1; j > 0; j--) {
            if (arr[j][i] == 0 || arr[j - 1][i] == 0) break;
            if (arr[j - 1][i] % arr[j][i] == 0) {
                arr[j - 1][i] -= arr[j][i];
                arr[j][i] *= 2;
                return 1;
            }
        }
    }
    return num_ops;
}

void compressRowP(unsigned int row[], int size) {
    unsigned int temp[MAX_ROZM] = {0};
    int idx = size - 1;

    for (int i = size - 1; i >= 0; i--) {
        if (row[i] != 0) {
            temp[idx--] = row[i];
        }
    }
    for (int i = size - 1; i >= 0; i--) {
        row[i] = temp[i];
    }
}

int mergeRowP(unsigned int mas[], int M) {
    int num_ops = 0;
    for (int j = M - 1; j > 0; j--) {
        if (mas[j] == 0 || mas[j - 1] == 0) break;
        if (mas[j - 1] % mas[j] == 0) {
            mas[j - 1] -= mas[j];
            mas[j] *= 2;
            return 1;
            num_ops++;
        }
    }
    return num_ops;
}

int main() {
    int M;
    cin >> M;
    unsigned int mas[MAX_ROZM][MAX_ROZM] = {0};
    char op;

    while (cin >> op) {
        if (op == 'N') {
            int x, y;
            unsigned int w;
            cin >> x >> y >> w;
            if (x >= 0 && y >= 0 && x < M && y < M && w <= 65536) {
                mas[x][y] = w;
            }
        } else if (op == 'L') {
            if (M > 1) {
                for (int i = 0; i < M; i++) {
                    int num_ops;
                    do {
                        compressRowL(mas[i], M);
                        num_ops = mergeRowL(mas[i], M);
                    } while (num_ops != 0);
                }
            }
        } else if (op == 'P') {
            if (M > 1) {
                for (int i = 0; i < M; i++) {
                    int num_ops;
                    do {
                        compressRowP(mas[i], M);
                        num_ops = mergeRowP(mas[i], M);
                    } while (num_ops != 0);
                }
            }
        } else if (op == 'G') {
            if (M > 1) {
                int num_ops;
                do {
                    compressRowG(mas, M);
                    num_ops = mergeColumnG(mas, M);
                } while (num_ops != 0);
            }
        } else if (op == 'D') {
            if (M > 1) {
                int num_ops;
                do {
                    compressRowD(mas, M);
                    num_ops = mergeColumnD(mas, M);
                } while (num_ops != 0);
            }
        } else if (op == 'S') {
            unsigned long suma = 0;
            for (int i = 0; i < M; i++) {
                for (int j = 0; j < M; j++) {
                    suma += mas[i][j];
                }
            }
            printf("%lu\n", suma);
        } else if (op == 'W') {
            for (int i = 0; i < M; i++) {
                for (int j = 0; j < M; j++) {
                    printf("%u ", mas[i][j]);
                }
                printf("\n");
            }
        } else if (op == 'C') {
            int newM;
            cin >> newM;
            M = newM;
            for (int i = 0; i < newM; i++) {
                for (int j = 0; j < newM; j++) {
                    cin >> mas[i][j];
                }
            }
        } else if (op == 'K') {
            unsigned long suma = 0;
            for (int i = 0; i < M; i++) {
                for (int j = 0; j < M; j++) {
                    suma += mas[i][j];
                }
            }
            printf("%lu\n", suma);
            break;
        }
    }
}
